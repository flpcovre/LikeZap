services:
  traefik:
    image: "traefik:v3.0"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./letsencrypt:/letsencrypt
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    networks:
      - web

  client:
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile
      target: ${APP_ENV:-local}
    ports:
      - "3000:3000"
    restart: unless-stopped
    tty: true
    volumes:
      - ./client:/app
      - /app/node_modules
    stdin_open: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.client.rule=PathPrefix(`/`)"
      - "traefik.http.routers.client.entrypoints=web"
      - "traefik.http.services.client.loadbalancer.server.port=3000"
      - "traefik.http.middlewares.client-strip.stripprefix.prefixes=/"
      - "traefik.http.routers.client.middlewares=client-strip"
    environment:
      - NODE_ENV=${APP_ENV:-local}
    depends_on:
      - api
    networks:
      - web
    
  webhook:
    container_name: webhook
    build: 
      context: ./webhook
      dockerfile: Dockerfile
    ports:
      - "3333:3333"
    environment:
      WEBHOOK_VERIFY_TOKEN: ${WEBHOOK_VERIFY_TOKEN}
      WEBHOOK_PORT: ${WEBHOOK_PORT}
    restart: unless-stopped
    tty: true
    volumes:
      - ./webhook:/app
      - /app/node_modules
    stdin_open: true
    labels:
    - "traefik.enable=true"
    - "traefik.http.routers.webhook.rule=PathPrefix(`/webhook`)"
    - "traefik.http.routers.webhook.entrypoints=web"
    - "traefik.http.services.webhook.loadbalancer.server.port=3333"
    - "traefik.http.middlewares.webhook-strip.stripprefix.prefixes=/webhook"
    - "traefik.http.routers.webhook.middlewares=webhook-strip"
    networks:
      - web

  api:
    container_name: api
    build:
      context: ./api
      dockerfile: Dockerfile
    restart: unless-stopped
    tty: true
    ports:
      - "9000:9000"
    volumes:
      - ./api:/var/www/html
    depends_on:
      - redis
    environment:
      APP_ENV: ${APP_ENV}
      APP_URL: ${APP_DOMAIN}
      DB_HOST: ${POSTGRES_HOST}
      DB_PORT: ${POSTGRES_PORT}
      DB_DATABASE: ${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - web
  
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
     - "8080:80"
    volumes:
      - ./api:/var/www/html
      - ./nginx/api.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.nginx.middlewares=portainer-prefix"
      - "traefik.http.middlewares.portainer-prefix.stripprefix.prefixes=/"
      - "traefik.http.middlewares.portainer-prefix.stripprefix.forceslash=false"
    networks:
      - web

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    tty: true
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - web

  redis:
    image: redis:alpine
    container_name: ${REDIS_HOST}
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    networks:
      - web
  
networks:
  web:
    driver: bridge
  
volumes:
  pgdata:
  redisdata: